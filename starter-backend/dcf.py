import yfinance as yf
from google import genai
import json 

def get_projected_growth_rates(ticker: str, projection_years: int = 5) -> list[float]:
    """
   Uses Gemini to get estimates of growth rates (because the growth rate cannot be a constant value in the calculations.)
    """
    try:
        client = genai.Client(
            vertexai=True, project='kir-sprinternship-2025-dev', location='us-central1'
        )

        # Prompt Gemini to estimate realistic growth rates. 
        prompt = (
            f"Act as an experienced financial analyst. Given the ticker {ticker}, "
            f"estimate a reasonable annual Free Cash Flow (FCF) growth rate for each of the "
            f"next {projection_years} years. "
            f"Provide the output as a JSON array of floating-point numbers. "
            f"Ensure the growth rates are presented as decimals (e.g., 0.10 for 10%)."
        )

        response = client.models.generate_content(
            model="gemini-2.5-flash",
            contents=prompt,
            config={
                "temperature": 0.05, # Use a low temperature for more conservative, factual-based estimates
                "response_mime_type": "application/json",
                "response_schema": { 
                    "type": "array",
                    "items": { "type": "number" }
                },
            },
        )
        
        # The response is parsed automatically if the schema is followed.
        growth_rates: list[float] = response.parsed

        # It's a good idea to perform a quick sanity check on the output
        if len(growth_rates) == projection_years:
            return growth_rates
        else:
            print(f"Warning: AI returned {len(growth_rates)} growth rates, expected {projection_years}.")
            return []

    except Exception as e:
        print(f"Error retrieving growth rates for {ticker}: {e}")
        return []

#This function will retrieve the data needed for the DCF calculation, from the yfinance API.
def dcf_data(ticker: str):
#This try and except block will handle errors in case the ticker is not found or the data cannot be retrieved.   
    try:
        stock = yf.Ticker(ticker)
        cashflow = stock.cashflow
        balance_sheet = stock.balance_sheet
        # Extract the most recent data points
        fcf = cashflow.loc['Free Cash Flow'][0] if not cashflow.empty and 'Free Cash Flow' in cashflow.index else None
        cash_and_equivalents = balance_sheet.loc['Cash And Cash Equivalents'][0] if not balance_sheet.empty and 'Cash And Cash Equivalents' in balance_sheet.index else None
        total_debt = balance_sheet.loc['Total Debt'][0] if not balance_sheet.empty and 'Total Debt' in balance_sheet.index else None
        shares_outstanding = stock.info.get('sharesOutstanding')

        return {
            "ticker": ticker,
            "FCF": fcf,
            "Cash & Cash Equivalents": cash_and_equivalents,
            "Total Debt": total_debt,
            "Shares Outstanding": shares_outstanding
        }
        #if ticker is not found: 
         except Exception as e:
        print(f"Error retrieving data for {ticker}: {e}")
        return None


def calculate_dcf_with_llm_rates(
    ticker: str,
    perpetual_growth_rate: float=0.025,
    discount_rate: float=0.1,
    projection_years: int = 5
):
    """
    Calculates DCF using growth rate generated by Gemini and other financial data from yfinance.
    """
    #Gets financial data from yfinance, also returns error if data is not found for some reason. 
    financial_data = dcf_data(ticker)
    if not financial_data or financial_data["FCF"] is None or financial_data["Shares Outstanding"] is None:
        return {"error": f"Could not retrieve essential data for DCF calculation for {ticker}."}

    #Gets growth rate estimates, also handles errors if the growth rate cannot be retrieved.
    projected_growth_rates = get_projected_growth_rates(ticker, projection_years)
    if not projected_growth_rates:
        return {"error": f"Could not get projected growth rates from AI for {ticker}."}

    # Project future Free Cash Flows for the next five years. 
    projected_fcfs = []
    fcf_initial = financial_data["FCF"]
    
    for rate in projected_growth_rates:
        fcf_next = fcf_initial * (1 + rate)
        projected_fcfs.append(fcf_next)
        fcf_initial = fcf_next # Update for the next iteration

   
    # The following are calculations based on the financial data and also how the calculations were manually done in google sheets. 
    #Calculate the Present Value of Projected FCFs
    pv_projected_fcfs = sum(fcf / ((1 + discount_rate) ** (i + 1)) for i, fcf in enumerate(projected_fcfs))

    #Calculate Terminal Value
    tv_year = projection_years + 1
    fcf_for_tv = projected_fcfs[-1] * (1 + perpetual_growth_rate)
    
    terminal_value = fcf_for_tv / (discount_rate - perpetual_growth_rate)
    pv_terminal_value = terminal_value / ((1 + discount_rate) ** tv_year)

    #Calculate Equity Value and Per-Share Value
    cash = financial_data["Cash & Cash Equivalents"] if financial_data["Cash & Cash Equivalents"] is not None else 0
    debt = financial_data["Total Debt"] if financial_data["Total Debt"] is not None else 0
    shares = financial_data["Shares Outstanding"]
    
    enterprise_value = pv_projected_fcfs + pv_terminal_value
    equity_value = enterprise_value + cash - debt
    intrinsic_value_per_share = equity_value / shares if shares > 0 else 0
    
#Finally, returning the results and the values of the data points used. 
    return {
        "Ticker": ticker,
        "Enterprise Value": enterprise_value,
        "Equity Value": equity_value,
        "Intrinsic Value Per Share": intrinsic_value_per_share,
        "Projected Growth Rates": projected_growth_rates,
        "Assumptions": {
            "Perpetual Growth Rate": f"{perpetual_growth_rate * 100:.2f}%",
            "Discount Rate (WACC)": f"{discount_rate * 100:.2f}%",
            "Projection Years": projection_years
        }
    }